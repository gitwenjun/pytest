{"name": "test_p", "status": "failed", "statusDetails": {"message": "AssertionError: assert 1 == 0\n +  where 1 = <built-in method get of dict object at 0x0000023CBEFDB098>('status')\n +    where <built-in method get of dict object at 0x0000023CBEFDB098> = {'msg': '购买失败，库存不足！', 'status': 1}.get", "trace": "mocker = <pytest_mock.plugin.MockerFixture object at 0x0000023CBEFDE048>\n\n    def test_p(mocker):\n        product = Product()\n        mock_values = {\"id\":1,\"name\":\"苹果\",\"num\":0}\n        product.get_product_status_by_id = mocker.patch(\"TestCases.mock.Product.get_product_status_by_id\",return_value=mock_values)\n        r = product.buy_product(2)\n        print(r)\n>       assert r.get('status') == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = <built-in method get of dict object at 0x0000023CBEFDB098>('status')\nE        +    where <built-in method get of dict object at 0x0000023CBEFDB098> = {'msg': '购买失败，库存不足！', 'status': 1}.get\n\nmock_1.py:11: AssertionError"}, "start": 1647523227944, "stop": 1647523227944, "uuid": "fc150917-f3f4-4c49-abe4-dfc6a87c41be", "historyId": "21482bad95e63633210ef70cdf8c9120", "testCaseId": "93bc12e653231c9171b92171fb93305e", "fullName": "TestCases.mock_1#test_p", "labels": [{"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "mock_1"}, {"name": "host", "value": "DESKTOP-76566J4"}, {"name": "thread", "value": "6064-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.mock_1"}]}